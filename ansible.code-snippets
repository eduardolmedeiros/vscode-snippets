{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	"playbook base": {
		"prefix": "ansible_pb_base",
		"body": [
			"---",
			"- hosts: all",
			"  become: true",
			"  roles:",
			"    - role: role_name",
			"  tasks:",
			"    - name: this is simple ping task",
			"      ping:",
			"    $0"
		],
		"description": "base standard playbook"
	},
	"playbook base serial": {
		"prefix": "ansible_pb_base_serial",
		"body": [
			"---",
			"- hosts: all",
			"  become: true",
			"  strategy: linear",
			"  serial: 1",
			"  roles:",
			"    - role: role_name",
			"  tasks:",
			"    - name: this is sample task",
			"      ping:",
			"    $0"
		],
		"description": "base serial playbook"
	},
	"playbook loop": {
		"prefix": "ansible_pb_loop",
		"body": [
			"---",
			"- hosts: all",
  			"  become: true",
			"  vars:",
			"    nfs_volumes:",
			"      - name: archive",
			"        dir: /opt/app/archive1",
			"        fs_type: nfs",
			"        device: storage-volume.example.com:/archive_vol_1",
			"        fs_opts: 'defaults,noatime,nfsvers=4'",
			"      - name: logs",
			"        dir: /opt/app/logs",
			"        fs_type: nfs",
			"        device: storage-volume.example.com:/logs",
			"        fs_opts: 'defaults,noatime,nfsvers=4'",
			"",
			"  tasks:$0",
			"    - name: ensure nfs volumes mounted",
			"      mount:",
			"        path: \"{{ item.dir }}\"",
			"        src: \"{{ item.device }}\"",
			"        fstype: \"{{ item.fs_type }}\"",
			"        opts: \"{{ item.fs_opts }}\"",
			"        state: mounted",
			"      loop: \"{{ nfs_volumes }}\"",
		],
		"description": "nfs loop sample"
	},
	"play loop": {
		"prefix": "ansible_play_loop",
		"body": [
			"- name: copy tomcat templates",
			"  template:",
			"    dest: \"{{ item.dest }}\"",
			"    owner: \"{{ item.owner }}\"",
			"    src: \"{{ item.src }}\"",
			"    group: \"{{ item.group }}\"",
			"    mode: \"{{ item.mode }}\"",
			"  loop:",
			"    - { src: opt/tomcat/config/server.xml.j2, dest: /opt/tomcat/config/server.xml, owner: tomcat, group: tomcat, mode: 0640 }",
			"    - { src: opt/tomcat/config/catalina.properties.j2, dest: /opt/tomcat/config/catalina.properties, owner: tomcat, group: tomcat, mode: 0640 }",
			"  notify:",
			"    - restarted tomcat",
		],
		"description": "play loop sample"
	},
	"playbook nested dict": {
		"prefix": "ansible_pb_nested_dict",
		"body": [
			"---",
			"- hosts: all",
			"  vars:",
			"    cars:",
			"      - name: mustang",
			"        color: yelow",
			"      - name: ferrari",
			"        color: red",
			"",
			"  tasks:$0",
			"    - name: Iterate over dictionary",
			"      debug:",
			"        msg:",
			"          - \"The car is {{ item.name }} and color is {{ item.color }}.\"",
			"      loop: \"{{ cars }}\"",
			"      loop_control:",
			"        label: \"{{ item.name }}\"",
		],
		"description": "playbook nested dictionary sample"
	},
	"playbook item2dict nested": {
		"prefix": "ansible_pb_item2dict",
		"body": [
			"---",
			"- hosts: all",
			"  vars:",
			"    cars:",
			"      mustang:",
			"        color: yellow",
			"        year: 2020",
			"      ferrari:",
			"        color: red",
			"        year: 2021",
			"",
			"  tasks:$0",
			"    - name: Iterate over dictionary",
			"      debug:",
			"        msg: \"The car is {{ item.key }}, color is {{ item.value.color }} and year is {{ item.value.year }}.\"",
			"      loop: \"{{ cars | dict2items }}\"",
		],
		"description": "playbook item2dict sample"
	},

	"play when": {
		"prefix": "ansible_play_when",
		"body": [
			"- name: shut down centos8 systems",
			"  command: /sbin/shutdown -t now",
			"   when:",
			"     - ansible_facts['distribution'] == \"CentOS",
			"     - ansible_facts['distribution_major_version'] == \"8\"",
		],
		"description": "play when sample"
	},
	"play debug": {
		"prefix": "ansible_play_debug",
		"body": [
			"- name: debug",
			"  debug:",
			"    msg: \"{{ ansible_date_time.date }}\"",
		],
		"description": "play when sample"
	},
	"jinja2 if else": {
		"prefix": "ansible_j2_if_else",
		"body": [
		   "{% if var1 is sameas true %}",
		   "ok. var1 is true",
		   "{% else %}",
		   "ok. var1 is not true",
		   "{% endif %}",	
		],
		"description": "jinja if else sample"
	},
	"jinja2 loop": {
		"prefix": "ansible_j2_loop",
		"body": [
			"# vars",
			"",
			"vars:",
			"  colors:",
			"    - blue",
			"    - black",
			"    - red",
			"",			
			"# jinja file",
			"",
			"{% for color in colors %}",
			"  {{ color }}",
			"{% endfor %}",
		],
		"description": "jinja2 loop sample"
	},

	"jinja2 loop key value": {
		"prefix": "ansible_j2_loop_key_value",
		"body": [
			"# vars",
			"",
			"vars:",
			"  cities:",
			"    parana: curitiba",
			"",			
			"# jinja file",
			"{% for k,v in cities.items() %}",
			"{{ k }}={{ v }}",
			"{% endfor %}",
		],
		"description": "jinja2 loop sample"
	},

	"jinja2 iter items": {
		"prefix": "ansible_j2_iter_items",
		"body": [
			"# vars",
			"vars:",
			"  webserver:",
			"    hosts:",
			"      host1:",
			"        host: host1.mydomain.com",
			"        port: 8080",
			"      host2:",
			"        host: host2.mydomain.com",
            "        port: 8080",	  
			"",			
			"# jinja file",
			"{% for webserver,nodes in webserver.hosts.items() %}",
			" {{nodes.host}}",
			" {{nodes.port}}",
		   "{% endfor %}",
		   
		],
		"description": "jinja2 loop sample"
	},


}